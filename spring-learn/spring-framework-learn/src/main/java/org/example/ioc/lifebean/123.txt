Spring 框架提供了多种方式来管理 Bean 的生命周期，其中包括使用注解和接口来定义 Bean 初始化和销毁的方法。下面列出了常用的注解和接口，并解释它们的作用。
常用注解
@PostConstruct
该注解标注的方法会在依赖注入完成后执行，通常用于执行初始化操作。
该注解只能应用于非静态方法，并且在一个 Bean 的生命周期中只会被调用一次。
@PreDestroy
该注解标注的方法会在容器销毁一个 Bean 之前执行，通常用于释放资源或者执行清理工作。
同样，该注解只能应用于非静态方法，并且在一个 Bean 的生命周期中只会被调用一次。
常用接口
InitializingBean
实现此接口的 Bean 必须定义一个 afterPropertiesSet() 方法，该方法将在所有 Bean 属性被设置之后调用。
如果 Bean 同时实现了 InitializingBean 接口和使用了 @PostConstruct 注解，那么 @PostConstruct 标记的方法将优先执行。
DisposableBean
实现此接口的 Bean 必须定义一个 destroy() 方法，该方法将在容器销毁 Bean 之前调用。
如果 Bean 同时实现了 DisposableBean 接口和使用了 @PreDestroy 注解，那么 @PreDestroy 标记的方法将优先执行。
Aware 接口
Spring 提供了一系列的 Aware 接口，如 BeanNameAware、BeanFactoryAware、ApplicationContextAware 等，这些接口可以让 Bean 在初始化过程中获得 Spring 容器的信息。
例如，BeanNameAware 接口定义了一个 setBeanName(String name) 方法，当 Bean 实现这个接口时，Spring 会在 Bean 初始化时调用这个方法，传入 Bean 的名称。
BeanPostProcessor
实现此接口的类被称为“后置处理器”，它们可以拦截 Bean 的实例化过程，并在 Bean 初始化前后进行一些额外的操作。
BeanPostProcessor 定义了两个方法：postProcessBeforeInitialization(Object bean, String beanName) 和 postProcessAfterInitialization(Object bean, String beanName)。
InstantiationAwareBeanPostProcessor
这个接口是 BeanPostProcessor 的子接口，提供了更多的方法来干预 Bean 的实例化过程。
它包含了 postProcessBeforeInstantiation(Class<?> beanClass, String beanName) 方法，可以在 Bean 实例化之前进行操作。